name: Pronetheia CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  API_IMAGE_NAME: pronetheia-api
  FRONTEND_IMAGE_NAME: pronetheia-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: src/frontend/package-lock.json

    - name: Restore .NET dependencies
      run: dotnet restore src/backend/Pronetheia.Api/Pronetheia.Api.csproj

    - name: Build .NET project
      run: dotnet build src/backend/Pronetheia.Api/Pronetheia.Api.csproj --no-restore

    - name: Run .NET tests
      run: dotnet test src/backend/Pronetheia.Api/Pronetheia.Api.csproj --no-build --verbosity normal

    - name: Install frontend dependencies
      run: npm ci
      working-directory: src/frontend

    - name: Build frontend
      run: npm run build
      working-directory: src/frontend

    - name: Install test dependencies
      run: npm ci
      working-directory: tests

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract API metadata
      id: api-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.API_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract Frontend metadata
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push API Docker image
      uses: docker/build-push-action@v5
      with:
        context: src/backend/Pronetheia.Api
        push: true
        tags: ${{ steps.api-meta.outputs.tags }}
        labels: ${{ steps.api-meta.outputs.labels }}

    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: src/frontend
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create deployment artifacts
      run: |
        mkdir -p deployment
        cp src/docker-compose.yml deployment/
        cp -r src/.env deployment/ || echo "No .env file found"
        
        # Create production docker-compose override
        cat > deployment/docker-compose.prod.yml << EOF
        version: '3.8'
        
        services:
          api:
            image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.API_IMAGE_NAME }}:latest
            environment:
              - ASPNETCORE_ENVIRONMENT=Production
              - OPENROUTER_API_KEY=\${OPENROUTER_API_KEY}
            restart: unless-stopped
        
          frontend:
            image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
            restart: unless-stopped
        
          db:
            restart: unless-stopped
            volumes:
              - pronetheia_db_data:/var/opt/mssql
        
        volumes:
          pronetheia_db_data:
        EOF

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-files
        path: deployment/

  integration-test:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: PronetheiaDB2024!
          ACCEPT_EULA: Y
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'PronetheiaDB2024!' -Q 'SELECT 1'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js for integration tests
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install test dependencies
      run: npm ci
      working-directory: tests

    - name: Pull latest images
      run: |
        docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.API_IMAGE_NAME }}:latest
        docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.FRONTEND_IMAGE_NAME }}:latest

    - name: Start services for integration test
      run: |
        # Create a test docker-compose file with latest images
        cat > docker-compose.test.yml << EOF
        version: '3.8'
        
        services:
          api:
            image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.API_IMAGE_NAME }}:latest
            ports:
              - "6789:80"
            environment:
              - ASPNETCORE_ENVIRONMENT=Development
              - ConnectionStrings__DefaultConnection=Server=localhost,1433;Database=PronetheiaDB;User Id=SA;Password=PronetheiaDB2024!;TrustServerCertificate=true;
              - Jwt__Key=PronetheiaSecretKeyThatIsLongEnoughForHS256AndSecure2024!
              - Jwt__Issuer=Pronetheia
              - Jwt__Audience=PronetheiaUsers
              - OpenRouter__ApiKey=test-key
            depends_on:
              - db
            networks:
              - pronetheia-network
        
          frontend:
            image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
            ports:
              - "3000:3000"
            environment:
              - VITE_API_URL=http://localhost:6789/api
            depends_on:
              - api
            networks:
              - pronetheia-network
        
          db:
            image: mcr.microsoft.com/mssql/server:2022-latest
            environment:
              - SA_PASSWORD=PronetheiaDB2024!
              - ACCEPT_EULA=Y
            networks:
              - pronetheia-network
        
        networks:
          pronetheia-network:
            driver: bridge
        EOF
        
        docker-compose -f docker-compose.test.yml up -d
        
        # Wait for services to be ready
        sleep 30
        
        # Check if services are responding
        curl -f http://localhost:6789/swagger || exit 1
        curl -f http://localhost:3000 || exit 1

    - name: Run integration tests
      run: |
        # Run the Puppeteer chat test
        npm test
      working-directory: tests
      env:
        FRONTEND_URL: http://localhost:3000
        API_URL: http://localhost:6789

    - name: Cleanup test environment
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v || true

  notify:
    needs: [test, build-and-push, deploy, integration-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build-and-push.result }}" == "success" && "${{ needs.integration-test.result }}" == "success" ]]; then
          echo "🎉 Pronetheia deployment successful!"
          echo "✅ All tests passed"
          echo "✅ Docker images built and pushed"
          echo "✅ Integration tests completed"
          echo ""
          echo "🚀 Ready for evolution cycle activation!"
        else
          echo "❌ Deployment failed - check logs above"
          echo "Test result: ${{ needs.test.result }}"
          echo "Build result: ${{ needs.build-and-push.result }}"
          echo "Integration test result: ${{ needs.integration-test.result }}"
        fi